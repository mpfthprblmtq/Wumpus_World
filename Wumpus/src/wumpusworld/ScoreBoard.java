/**
 * File:    ScoreBoard.java
 * Desc:    This class is the endGame window.  It shows the point values, an
 *          image based on the result, and two buttons for reset and close.
 */

// package
package wumpusworld;

// imports
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;

/**
 * ScoreBoard
 */
public class ScoreBoard extends javax.swing.JFrame {

    /** 
     * Creates new form ScoreBoard 
     */
    public ScoreBoard() {

        // init the components
        initComponents();
        
        // request the focus
        this.requestFocus();

        // keyboard listener that detects key presses
        // just listens for R, ENTER, and ESCAPE
        KeyboardFocusManager.getCurrentKeyboardFocusManager()
                .addKeyEventDispatcher((KeyEvent e) -> {
                    this.requestFocus();
                    if (this.isFocusOwner()) {
                        if (e.getID() == KeyEvent.KEY_RELEASED) {
                            switch (e.getKeyCode()) {
                                case KeyEvent.VK_R:
                                    reset.doClick();
                                    break;
                                case KeyEvent.VK_ENTER:
                                    reset.doClick();
                                    break;
                                case KeyEvent.VK_ESCAPE:
                                    close.doClick();
                                    break;

                            }
                        }
                    }
                    return false;
                });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        image = new javax.swing.JLabel();
        gold = new javax.swing.JLabel();
        wumpus = new javax.swing.JLabel();
        moves = new javax.swing.JLabel();
        score = new javax.swing.JLabel();
        reset = new javax.swing.JButton();
        close = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        gold.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        gold.setText("gold");

        wumpus.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        wumpus.setText("wumpus");

        moves.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        moves.setText("moves");

        score.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        score.setText("score");

        reset.setText("Reset [R]");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        close.setText("Close Game [ESC]");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gold, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(wumpus, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                            .addComponent(moves, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                            .addComponent(score, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(reset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addComponent(close)
                        .addGap(21, 21, 21))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(gold)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wumpus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moves)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(score)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reset)
                    .addComponent(close))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * What happens when the reset button is pressed
     * Calls Main functions to close, then reopen the game board
     * @param evt, the event object
     */
    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        Main.closeScoreBoard();
        
        // determine what board is being used
        switch (Main.size) {
            case 4:
                if(!Main.AI) {
                    Main.closeBoard16();
                    Main.openBoard16();
                } else if(Main.AI) {
                    Main.closeBoard16AI();
                    Main.openBoard16AI();
                }
                break;
            case 8:
                if(!Main.AI) {
                    Main.closeBoard64();
                    Main.openBoard64();
                } else if(Main.AI) {
                    Main.closeBoard64AI();
                    Main.openBoard64AI();
                }
                break;
            case 16:
                if(!Main.AI) {
                    Main.closeBoard256();
                    Main.openBoard256();
                } else if(Main.AI) {
                    Main.closeBoard256AI();
                    Main.openBoard256AI();
                }
                break;
            default:
                break;
        }
    }//GEN-LAST:event_resetActionPerformed

    /**
     * What happens when the close button is pressed
     * Pretty self-explanatory, closes the whole application
     * @param evt, the event object
     */
    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        System.exit(0);
    }//GEN-LAST:event_closeActionPerformed

    /**
     * Sets up the board before showing it, called by the Board class before
     * setting the Frame visible
     * 
     * @param s, an integer array that contains the scores
     * @param img, the image icon to use
     * @param header, the title of the frame
     */
    public void initializeScoreBoard(int[] s, String img, String header) {
        
        // gold
        gold.setText("Picked up Gold: " + s[0]);
        
        // wumpus
        wumpus.setText("Killed Wumpus:  " + s[1]);
        
        // moves
        // text formatting so it looks good
        if (s[2] < 0) {
            moves.setText("Moves:         " + s[2]);
        } else if (s[2] == 0) {
            moves.setText("Moves:          " + s[2]);
        }
        
        // score
        score.setText("Total Score:    " + s[3]);
        
        // image icon
        image.setIcon(new ImageIcon(img));
        
        // title
        this.setTitle(header);
    }

    /**
     * If you're reading this, you probably know what main does
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScoreBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScoreBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScoreBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScoreBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            //new ScoreBoard().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton close;
    private javax.swing.JLabel gold;
    private javax.swing.JLabel image;
    private javax.swing.JLabel moves;
    private javax.swing.JButton reset;
    private javax.swing.JLabel score;
    private javax.swing.JLabel wumpus;
    // End of variables declaration//GEN-END:variables
}
